{
	"swagger": "2.0",
	"info": {
		"version": "1.0.0",
		"title": "zoo_api"
	},
	"basePath": "/api",
	"paths": {
		"/Users/{id}/accessTokens/{fk}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Find a related item by id for accessTokens.",
				"operationId": "User.prototype.__findById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"User"
				],
				"summary": "Delete a related item by id for accessTokens.",
				"operationId": "User.prototype.__destroyById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"User"
				],
				"summary": "Update a related item by id for accessTokens.",
				"operationId": "User.prototype.__updateById__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "fk",
						"in": "path",
						"description": "Foreign key for accessTokens",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}/accessTokens": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Queries accessTokens of User.",
				"operationId": "User.prototype.__get__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AccessToken"
							}
						}
					}
				},
				"deprecated": false
			},
			"post": {
				"tags": [
					"User"
				],
				"summary": "Creates a new instance in accessTokens of this model.",
				"operationId": "User.prototype.__create__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/AccessToken"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"User"
				],
				"summary": "Deletes all accessTokens of this model.",
				"operationId": "User.prototype.__delete__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}/accessTokens/count": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Counts accessTokens of User.",
				"operationId": "User.prototype.__count__accessTokens",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "User.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"User"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "User.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"User"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "User.replaceOrCreate__put_Users",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"User"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "User.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/replaceOrCreate": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "User.replaceOrCreate__post_Users_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/upsertWithWhere": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "User.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}/exists": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "User.exists__get_Users_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}": {
			"head": {
				"tags": [
					"User"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "User.exists__head_Users_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"User"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "User.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"User"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "User.replaceById__put_Users_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"User"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "User.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"User"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "User.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}/replace": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "User.replaceById__post_Users_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/findOne": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "User.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/update": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "User.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/count": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "User.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/change-stream": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create a change stream.",
				"operationId": "User.createChangeStream__post_Users_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"User"
				],
				"summary": "Create a change stream.",
				"operationId": "User.createChangeStream__get_Users_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/login": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Login a user with username/email and password.",
				"operationId": "User.login",
				"parameters": [
					{
						"name": "credentials",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					},
					{
						"name": "include",
						"in": "query",
						"description": "Related objects to include in the response. See the description of return value for more details.",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
							"type": "object"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Users/logout": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Logout a user with access token.",
				"operationId": "User.logout",
				"parameters": [

				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/{id}/verify": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Trigger user's identity verification with configured verifyOptions",
				"operationId": "User.prototype.verify",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "User id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/confirm": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Confirm a user registration with identity verification token.",
				"operationId": "User.confirm",
				"parameters": [
					{
						"name": "uid",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "token",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "redirect",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/reset": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Reset password for a user with email.",
				"operationId": "User.resetPassword",
				"parameters": [
					{
						"name": "options",
						"in": "body",
						"required": true,
						"schema": {
							"type": "object"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/change-password": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Change a user's password.",
				"operationId": "User.changePassword",
				"parameters": [
					{
						"name": "oldPassword",
						"in": "formData",
						"required": true,
						"type": "string"
					},
					{
						"name": "newPassword",
						"in": "formData",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Users/reset-password": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Reset user's password via a password-reset token.",
				"operationId": "User.setPassword",
				"parameters": [
					{
						"name": "newPassword",
						"in": "formData",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request was successful"
					}
				},
				"deprecated": false
			}
		},
		"/Animals/{id}/animalDiets": {
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Fetches belongsTo relation animalDiets.",
				"operationId": "Animals.prototype.__get__animalDiets",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Animals id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Animals.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Animals"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Animals.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Animals"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Animals.replaceOrCreate__put_Animals",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Animals.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Animals"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/replaceOrCreate": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Animals.replaceOrCreate__post_Animals_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/upsertWithWhere": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Animals.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/{id}/exists": {
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Animals.exists__get_Animals_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/{id}": {
			"head": {
				"tags": [
					"Animals"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Animals.exists__head_Animals_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Animals.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Animals"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Animals.replaceById__put_Animals_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Animals"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Animals.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Animals"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Animals.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Animals id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/{id}/replace": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Animals.replaceById__post_Animals_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/findOne": {
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Animals.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Animals"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/update": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Animals.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Animals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/count": {
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Animals.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Animals/change-stream": {
			"post": {
				"tags": [
					"Animals"
				],
				"summary": "Create a change stream.",
				"operationId": "Animals.createChangeStream__post_Animals_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Animals"
				],
				"summary": "Create a change stream.",
				"operationId": "Animals.createChangeStream__get_Animals_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "BudgetIds.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "BudgetIds.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "BudgetIds.replaceOrCreate__put_BudgetIds",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "BudgetIds.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/BudgetIds"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/replaceOrCreate": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "BudgetIds.replaceOrCreate__post_BudgetIds_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/upsertWithWhere": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "BudgetIds.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/{id}/exists": {
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "BudgetIds.exists__get_BudgetIds_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/{id}": {
			"head": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "BudgetIds.exists__head_BudgetIds_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "BudgetIds.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "BudgetIds.replaceById__put_BudgetIds_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "BudgetIds.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "BudgetIds.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "BudgetIds id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/{id}/replace": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "BudgetIds.replaceById__post_BudgetIds_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/findOne": {
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "BudgetIds.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/update": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "BudgetIds.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/BudgetIds"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/count": {
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "BudgetIds.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/BudgetIds/change-stream": {
			"post": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Create a change stream.",
				"operationId": "BudgetIds.createChangeStream__post_BudgetIds_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"BudgetIds"
				],
				"summary": "Create a change stream.",
				"operationId": "BudgetIds.createChangeStream__get_BudgetIds_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/{id}/dietCaseNotes": {
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Fetches belongsTo relation dietCaseNotes.",
				"operationId": "CaseNotes.prototype.__get__dietCaseNotes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "CaseNotes id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "CaseNotes.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "CaseNotes.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "CaseNotes.replaceOrCreate__put_CaseNotes",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "CaseNotes.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CaseNotes"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/replaceOrCreate": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "CaseNotes.replaceOrCreate__post_CaseNotes_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/upsertWithWhere": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "CaseNotes.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/{id}/exists": {
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "CaseNotes.exists__get_CaseNotes_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/{id}": {
			"head": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "CaseNotes.exists__head_CaseNotes_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "CaseNotes.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "CaseNotes.replaceById__put_CaseNotes_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "CaseNotes.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "CaseNotes.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "CaseNotes id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/{id}/replace": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "CaseNotes.replaceById__post_CaseNotes_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/findOne": {
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "CaseNotes.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/CaseNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/update": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "CaseNotes.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/CaseNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/count": {
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "CaseNotes.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/CaseNotes/change-stream": {
			"post": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Create a change stream.",
				"operationId": "CaseNotes.createChangeStream__post_CaseNotes_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"CaseNotes"
				],
				"summary": "Create a change stream.",
				"operationId": "CaseNotes.createChangeStream__get_CaseNotes_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "DataSrc.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DataSrc"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "DataSrc.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DataSrc"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DataSrc.replaceOrCreate__put_DataSrcs",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "DataSrc.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DataSrc"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/replaceOrCreate": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DataSrc.replaceOrCreate__post_DataSrcs_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/upsertWithWhere": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "DataSrc.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/{id}/exists": {
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DataSrc.exists__get_DataSrcs_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/{id}": {
			"head": {
				"tags": [
					"DataSrc"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DataSrc.exists__head_DataSrcs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "DataSrc.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DataSrc"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DataSrc.replaceById__put_DataSrcs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"DataSrc"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "DataSrc.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DataSrc"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "DataSrc.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DataSrc id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/{id}/replace": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DataSrc.replaceById__post_DataSrcs_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/findOne": {
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "DataSrc.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/update": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "DataSrc.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DataSrc"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/count": {
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "DataSrc.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DataSrcs/change-stream": {
			"post": {
				"tags": [
					"DataSrc"
				],
				"summary": "Create a change stream.",
				"operationId": "DataSrc.createChangeStream__post_DataSrcs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DataSrc"
				],
				"summary": "Create a change stream.",
				"operationId": "DataSrc.createChangeStream__get_DataSrcs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/{id}/deliveryContainerLocations": {
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Fetches belongsTo relation deliveryContainerLocations.",
				"operationId": "DeliveryContainers.prototype.__get__deliveryContainerLocations",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DeliveryContainers id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "DeliveryContainers.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "DeliveryContainers.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DeliveryContainers.replaceOrCreate__put_DeliveryContainers",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "DeliveryContainers.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DeliveryContainers"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/replaceOrCreate": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DeliveryContainers.replaceOrCreate__post_DeliveryContainers_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/upsertWithWhere": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "DeliveryContainers.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/{id}/exists": {
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DeliveryContainers.exists__get_DeliveryContainers_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/{id}": {
			"head": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DeliveryContainers.exists__head_DeliveryContainers_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "DeliveryContainers.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DeliveryContainers.replaceById__put_DeliveryContainers_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "DeliveryContainers.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "DeliveryContainers.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DeliveryContainers id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/{id}/replace": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DeliveryContainers.replaceById__post_DeliveryContainers_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/findOne": {
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "DeliveryContainers.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/update": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "DeliveryContainers.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/count": {
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "DeliveryContainers.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DeliveryContainers/change-stream": {
			"post": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Create a change stream.",
				"operationId": "DeliveryContainers.createChangeStream__post_DeliveryContainers_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DeliveryContainers"
				],
				"summary": "Create a change stream.",
				"operationId": "DeliveryContainers.createChangeStream__get_DeliveryContainers_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/dietDeliveryContainer": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Fetches belongsTo relation dietDeliveryContainer.",
				"operationId": "Diets.prototype.__get__dietDeliveryContainer",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DeliveryContainers"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/dietEmployee": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Fetches belongsTo relation dietEmployee.",
				"operationId": "Diets.prototype.__get__dietEmployee",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/dietFoodPrepTable": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Fetches belongsTo relation dietFoodPrepTable.",
				"operationId": "Diets.prototype.__get__dietFoodPrepTable",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/dietSpecies": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Fetches belongsTo relation dietSpecies.",
				"operationId": "Diets.prototype.__get__dietSpecies",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/dietSubenclosure": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Fetches belongsTo relation dietSubenclosure.",
				"operationId": "Diets.prototype.__get__dietSubenclosure",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Diets.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Diets"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Diets.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Diets"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Diets.replaceOrCreate__put_Diets",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Diets.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Diets"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/replaceOrCreate": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Diets.replaceOrCreate__post_Diets_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/upsertWithWhere": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Diets.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/exists": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Diets.exists__get_Diets_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}": {
			"head": {
				"tags": [
					"Diets"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Diets.exists__head_Diets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Diets.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Diets"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Diets.replaceById__put_Diets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Diets"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Diets.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Diets"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Diets.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Diets id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/{id}/replace": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Diets.replaceById__post_Diets_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/findOne": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Diets.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/update": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Diets.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Diets"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/count": {
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Diets.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Diets/change-stream": {
			"post": {
				"tags": [
					"Diets"
				],
				"summary": "Create a change stream.",
				"operationId": "Diets.createChangeStream__post_Diets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Diets"
				],
				"summary": "Create a change stream.",
				"operationId": "Diets.createChangeStream__get_Diets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/{id}/dietChangesDiets": {
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Fetches belongsTo relation dietChangesDiets.",
				"operationId": "DietChanges.prototype.__get__dietChangesDiets",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietChanges id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "DietChanges.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietChanges"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "DietChanges.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietChanges"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietChanges.replaceOrCreate__put_DietChanges",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "DietChanges.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DietChanges"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/replaceOrCreate": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietChanges.replaceOrCreate__post_DietChanges_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/upsertWithWhere": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "DietChanges.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/{id}/exists": {
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietChanges.exists__get_DietChanges_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/{id}": {
			"head": {
				"tags": [
					"DietChanges"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietChanges.exists__head_DietChanges_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "DietChanges.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietChanges"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietChanges.replaceById__put_DietChanges_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"DietChanges"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "DietChanges.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietChanges"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "DietChanges.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietChanges id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/{id}/replace": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietChanges.replaceById__post_DietChanges_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/findOne": {
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "DietChanges.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietChanges"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/update": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "DietChanges.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietChanges"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/count": {
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "DietChanges.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietChanges/change-stream": {
			"post": {
				"tags": [
					"DietChanges"
				],
				"summary": "Create a change stream.",
				"operationId": "DietChanges.createChangeStream__post_DietChanges_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietChanges"
				],
				"summary": "Create a change stream.",
				"operationId": "DietChanges.createChangeStream__get_DietChanges_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/dietHistoryDiets": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Fetches belongsTo relation dietHistoryDiets.",
				"operationId": "DietHistory.prototype.__get__dietHistoryDiets",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietHistory id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/dietHistoryEmployees": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Fetches belongsTo relation dietHistoryEmployees.",
				"operationId": "DietHistory.prototype.__get__dietHistoryEmployees",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietHistory id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/dietHistoryFoods": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Fetches belongsTo relation dietHistoryFoods.",
				"operationId": "DietHistory.prototype.__get__dietHistoryFoods",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietHistory id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/dietHistoryUnits": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Fetches belongsTo relation dietHistoryUnits.",
				"operationId": "DietHistory.prototype.__get__dietHistoryUnits",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietHistory id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "DietHistory.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietHistory"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "DietHistory.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietHistory"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietHistory.replaceOrCreate__put_DietHistories",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "DietHistory.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DietHistory"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/replaceOrCreate": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietHistory.replaceOrCreate__post_DietHistories_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/upsertWithWhere": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "DietHistory.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/exists": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietHistory.exists__get_DietHistories_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}": {
			"head": {
				"tags": [
					"DietHistory"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietHistory.exists__head_DietHistories_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "DietHistory.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietHistory"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietHistory.replaceById__put_DietHistories_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"DietHistory"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "DietHistory.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietHistory"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "DietHistory.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietHistory id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/{id}/replace": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietHistory.replaceById__post_DietHistories_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/findOne": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "DietHistory.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietHistory"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/update": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "DietHistory.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietHistory"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/count": {
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "DietHistory.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietHistories/change-stream": {
			"post": {
				"tags": [
					"DietHistory"
				],
				"summary": "Create a change stream.",
				"operationId": "DietHistory.createChangeStream__post_DietHistories_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietHistory"
				],
				"summary": "Create a change stream.",
				"operationId": "DietHistory.createChangeStream__get_DietHistories_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}/dietPlanDiets": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Fetches belongsTo relation dietPlanDiets.",
				"operationId": "DietPlan.prototype.__get__dietPlanDiets",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietPlan id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}/dietPlanFoods": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Fetches belongsTo relation dietPlanFoods.",
				"operationId": "DietPlan.prototype.__get__dietPlanFoods",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietPlan id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}/dietPlanUnits": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Fetches belongsTo relation dietPlanUnits.",
				"operationId": "DietPlan.prototype.__get__dietPlanUnits",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietPlan id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "DietPlan.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietPlan"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "DietPlan.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietPlan"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietPlan.replaceOrCreate__put_DietPlans",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "DietPlan.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DietPlan"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/replaceOrCreate": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "DietPlan.replaceOrCreate__post_DietPlans_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/upsertWithWhere": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "DietPlan.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}/exists": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietPlan.exists__get_DietPlans_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}": {
			"head": {
				"tags": [
					"DietPlan"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "DietPlan.exists__head_DietPlans_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "DietPlan.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"DietPlan"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietPlan.replaceById__put_DietPlans_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"DietPlan"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "DietPlan.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"DietPlan"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "DietPlan.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "DietPlan id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/{id}/replace": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "DietPlan.replaceById__post_DietPlans_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/findOne": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "DietPlan.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DietPlan"
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/update": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "DietPlan.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/DietPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/count": {
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "DietPlan.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/DietPlans/change-stream": {
			"post": {
				"tags": [
					"DietPlan"
				],
				"summary": "Create a change stream.",
				"operationId": "DietPlan.createChangeStream__post_DietPlans_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"DietPlan"
				],
				"summary": "Create a change stream.",
				"operationId": "DietPlan.createChangeStream__get_DietPlans_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Employees.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Employees"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Employees.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Employees"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Employees.replaceOrCreate__put_Employees",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Employees.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Employees"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/replaceOrCreate": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Employees.replaceOrCreate__post_Employees_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/upsertWithWhere": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Employees.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/{id}/exists": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Employees.exists__get_Employees_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/{id}": {
			"head": {
				"tags": [
					"Employees"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Employees.exists__head_Employees_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Employees.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Employees"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Employees.replaceById__put_Employees_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Employees"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Employees.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Employees"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Employees.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Employees id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/{id}/replace": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Employees.replaceById__post_Employees_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/findOne": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Employees.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Employees"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/update": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Employees.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Employees"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/count": {
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Employees.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Employees/change-stream": {
			"post": {
				"tags": [
					"Employees"
				],
				"summary": "Create a change stream.",
				"operationId": "Employees.createChangeStream__post_Employees_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Employees"
				],
				"summary": "Create a change stream.",
				"operationId": "Employees.createChangeStream__get_Employees_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/{id}/foodBudgetId": {
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Fetches belongsTo relation foodBudgetId.",
				"operationId": "Food.prototype.__get__foodBudgetId",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Food id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/BudgetIds"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/{id}/foodFoodCategory": {
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Fetches belongsTo relation foodFoodCategory.",
				"operationId": "Food.prototype.__get__foodFoodCategory",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Food id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Food.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Food"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Food.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Food"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Food.replaceOrCreate__put_Food",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Food.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Food"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/replaceOrCreate": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Food.replaceOrCreate__post_Food_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/upsertWithWhere": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Food.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/{id}/exists": {
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Food.exists__get_Food_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/{id}": {
			"head": {
				"tags": [
					"Food"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Food.exists__head_Food_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Food.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Food"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Food.replaceById__put_Food_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Food"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Food.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Food"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Food.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Food id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/{id}/replace": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Food.replaceById__post_Food_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/findOne": {
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Food.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/update": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Food.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Food"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/count": {
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Food.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Food/change-stream": {
			"post": {
				"tags": [
					"Food"
				],
				"summary": "Create a change stream.",
				"operationId": "Food.createChangeStream__post_Food_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Food"
				],
				"summary": "Create a change stream.",
				"operationId": "Food.createChangeStream__get_Food_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "FoodCategories.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "FoodCategories.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodCategories.replaceOrCreate__put_FoodCategories",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "FoodCategories.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FoodCategories"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/replaceOrCreate": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodCategories.replaceOrCreate__post_FoodCategories_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/upsertWithWhere": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "FoodCategories.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/{id}/exists": {
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodCategories.exists__get_FoodCategories_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/{id}": {
			"head": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodCategories.exists__head_FoodCategories_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "FoodCategories.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodCategories.replaceById__put_FoodCategories_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "FoodCategories.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "FoodCategories.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "FoodCategories id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/{id}/replace": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodCategories.replaceById__post_FoodCategories_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/findOne": {
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "FoodCategories.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodCategories"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/update": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "FoodCategories.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodCategories"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/count": {
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "FoodCategories.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodCategories/change-stream": {
			"post": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodCategories.createChangeStream__post_FoodCategories_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodCategories"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodCategories.createChangeStream__get_FoodCategories_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "FoodPrepTables.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "FoodPrepTables.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodPrepTables.replaceOrCreate__put_FoodPrepTables",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "FoodPrepTables.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FoodPrepTables"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/replaceOrCreate": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodPrepTables.replaceOrCreate__post_FoodPrepTables_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/upsertWithWhere": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "FoodPrepTables.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/{id}/exists": {
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodPrepTables.exists__get_FoodPrepTables_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/{id}": {
			"head": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodPrepTables.exists__head_FoodPrepTables_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "FoodPrepTables.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodPrepTables.replaceById__put_FoodPrepTables_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "FoodPrepTables.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "FoodPrepTables.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "FoodPrepTables id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/{id}/replace": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodPrepTables.replaceById__post_FoodPrepTables_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/findOne": {
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "FoodPrepTables.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/update": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "FoodPrepTables.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodPrepTables"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/count": {
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "FoodPrepTables.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodPrepTables/change-stream": {
			"post": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodPrepTables.createChangeStream__post_FoodPrepTables_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodPrepTables"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodPrepTables.createChangeStream__get_FoodPrepTables_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/{id}/foodWeightFoods": {
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Fetches belongsTo relation foodWeightFoods.",
				"operationId": "FoodWeights.prototype.__get__foodWeightFoods",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "FoodWeights id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/{id}/foodWeightUnits": {
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Fetches belongsTo relation foodWeightUnits.",
				"operationId": "FoodWeights.prototype.__get__foodWeightUnits",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "FoodWeights id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "FoodWeights.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "FoodWeights.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodWeights.replaceOrCreate__put_FoodWeights",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "FoodWeights.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/FoodWeights"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/replaceOrCreate": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "FoodWeights.replaceOrCreate__post_FoodWeights_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/upsertWithWhere": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "FoodWeights.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/{id}/exists": {
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodWeights.exists__get_FoodWeights_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/{id}": {
			"head": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "FoodWeights.exists__head_FoodWeights_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "FoodWeights.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodWeights.replaceById__put_FoodWeights_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "FoodWeights.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "FoodWeights.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "FoodWeights id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/{id}/replace": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "FoodWeights.replaceById__post_FoodWeights_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/findOne": {
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "FoodWeights.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/FoodWeights"
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/update": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "FoodWeights.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/FoodWeights"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/count": {
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "FoodWeights.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/FoodWeights/change-stream": {
			"post": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodWeights.createChangeStream__post_FoodWeights_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"FoodWeights"
				],
				"summary": "Create a change stream.",
				"operationId": "FoodWeights.createChangeStream__get_FoodWeights_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "LifeStages.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"LifeStages"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "LifeStages.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"LifeStages"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "LifeStages.replaceOrCreate__put_LifeStages",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "LifeStages.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/LifeStages"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/replaceOrCreate": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "LifeStages.replaceOrCreate__post_LifeStages_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/upsertWithWhere": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "LifeStages.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/{id}/exists": {
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "LifeStages.exists__get_LifeStages_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/{id}": {
			"head": {
				"tags": [
					"LifeStages"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "LifeStages.exists__head_LifeStages_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "LifeStages.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"LifeStages"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "LifeStages.replaceById__put_LifeStages_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"LifeStages"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "LifeStages.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"LifeStages"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "LifeStages.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "LifeStages id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/{id}/replace": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "LifeStages.replaceById__post_LifeStages_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/findOne": {
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "LifeStages.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/LifeStages"
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/update": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "LifeStages.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/LifeStages"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/count": {
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "LifeStages.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/LifeStages/change-stream": {
			"post": {
				"tags": [
					"LifeStages"
				],
				"summary": "Create a change stream.",
				"operationId": "LifeStages.createChangeStream__post_LifeStages_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"LifeStages"
				],
				"summary": "Create a change stream.",
				"operationId": "LifeStages.createChangeStream__get_LifeStages_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Locations.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Locations"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Locations.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Locations"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Locations.replaceOrCreate__put_Locations",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Locations.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Locations"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/replaceOrCreate": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Locations.replaceOrCreate__post_Locations_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/upsertWithWhere": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Locations.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/{id}/exists": {
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Locations.exists__get_Locations_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/{id}": {
			"head": {
				"tags": [
					"Locations"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Locations.exists__head_Locations_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Locations.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Locations"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Locations.replaceById__put_Locations_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Locations"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Locations.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Locations"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Locations.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Locations id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/{id}/replace": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Locations.replaceById__post_Locations_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/findOne": {
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Locations.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/update": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Locations.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Locations"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/count": {
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Locations.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Locations/change-stream": {
			"post": {
				"tags": [
					"Locations"
				],
				"summary": "Create a change stream.",
				"operationId": "Locations.createChangeStream__post_Locations_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Locations"
				],
				"summary": "Create a change stream.",
				"operationId": "Locations.createChangeStream__get_Locations_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Logons.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Logons"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Logons.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Logons"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Logons.replaceOrCreate__put_Logons",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Logons.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Logons"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/replaceOrCreate": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Logons.replaceOrCreate__post_Logons_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/upsertWithWhere": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Logons.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/{id}/exists": {
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Logons.exists__get_Logons_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/{id}": {
			"head": {
				"tags": [
					"Logons"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Logons.exists__head_Logons_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Logons.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Logons"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Logons.replaceById__put_Logons_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Logons"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Logons.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Logons"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Logons.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Logons id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/{id}/replace": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Logons.replaceById__post_Logons_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/findOne": {
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Logons.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Logons"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/update": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Logons.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Logons"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/count": {
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Logons.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Logons/change-stream": {
			"post": {
				"tags": [
					"Logons"
				],
				"summary": "Create a change stream.",
				"operationId": "Logons.createChangeStream__post_Logons_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Logons"
				],
				"summary": "Create a change stream.",
				"operationId": "Logons.createChangeStream__get_Logons_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "NutrDef.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"NutrDef"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "NutrDef.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"NutrDef"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "NutrDef.replaceOrCreate__put_NutrDefs",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "NutrDef.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/NutrDef"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/replaceOrCreate": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "NutrDef.replaceOrCreate__post_NutrDefs_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/upsertWithWhere": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "NutrDef.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/{id}/exists": {
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "NutrDef.exists__get_NutrDefs_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/{id}": {
			"head": {
				"tags": [
					"NutrDef"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "NutrDef.exists__head_NutrDefs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "NutrDef.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"NutrDef"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "NutrDef.replaceById__put_NutrDefs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"NutrDef"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "NutrDef.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"NutrDef"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "NutrDef.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutrDef id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/{id}/replace": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "NutrDef.replaceById__post_NutrDefs_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/findOne": {
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "NutrDef.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/update": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "NutrDef.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutrDef"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/count": {
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "NutrDef.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutrDefs/change-stream": {
			"post": {
				"tags": [
					"NutrDef"
				],
				"summary": "Create a change stream.",
				"operationId": "NutrDef.createChangeStream__post_NutrDefs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutrDef"
				],
				"summary": "Create a change stream.",
				"operationId": "NutrDef.createChangeStream__get_NutrDefs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/nutDataDataSrc": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Fetches belongsTo relation nutDataDataSrc.",
				"operationId": "NutData.prototype.__get__nutDataDataSrc",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutData id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/DataSrc"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/nutDataNutrDef": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Fetches belongsTo relation nutDataNutrDef.",
				"operationId": "NutData.prototype.__get__nutDataNutrDef",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutData id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutrDef"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/nutDataFoods": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Fetches belongsTo relation nutDataFoods.",
				"operationId": "NutData.prototype.__get__nutDataFoods",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutData id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Food"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/nutDataSrcCd": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Fetches belongsTo relation nutDataSrcCd.",
				"operationId": "NutData.prototype.__get__nutDataSrcCd",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutData id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "NutData.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"NutData"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "NutData.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"NutData"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "NutData.replaceOrCreate__put_NutData",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "NutData.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/NutData"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/replaceOrCreate": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "NutData.replaceOrCreate__post_NutData_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/upsertWithWhere": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "NutData.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/exists": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "NutData.exists__get_NutData_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}": {
			"head": {
				"tags": [
					"NutData"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "NutData.exists__head_NutData_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "NutData.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"NutData"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "NutData.replaceById__put_NutData_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"NutData"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "NutData.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"NutData"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "NutData.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "NutData id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/{id}/replace": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "NutData.replaceById__post_NutData_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/findOne": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "NutData.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/NutData"
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/update": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "NutData.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/NutData"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/count": {
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "NutData.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/NutData/change-stream": {
			"post": {
				"tags": [
					"NutData"
				],
				"summary": "Create a change stream.",
				"operationId": "NutData.createChangeStream__post_NutData_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"NutData"
				],
				"summary": "Create a change stream.",
				"operationId": "NutData.createChangeStream__get_NutData_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "ParkTable.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"ParkTable"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "ParkTable.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"ParkTable"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "ParkTable.replaceOrCreate__put_ParkTables",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "ParkTable.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ParkTable"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/replaceOrCreate": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "ParkTable.replaceOrCreate__post_ParkTables_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/upsertWithWhere": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "ParkTable.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/{id}/exists": {
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "ParkTable.exists__get_ParkTables_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/{id}": {
			"head": {
				"tags": [
					"ParkTable"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "ParkTable.exists__head_ParkTables_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "ParkTable.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"ParkTable"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "ParkTable.replaceById__put_ParkTables_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"ParkTable"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "ParkTable.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"ParkTable"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "ParkTable.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ParkTable id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/{id}/replace": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "ParkTable.replaceById__post_ParkTables_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/findOne": {
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "ParkTable.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/ParkTable"
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/update": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "ParkTable.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/ParkTable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/count": {
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "ParkTable.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/ParkTables/change-stream": {
			"post": {
				"tags": [
					"ParkTable"
				],
				"summary": "Create a change stream.",
				"operationId": "ParkTable.createChangeStream__post_ParkTables_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"ParkTable"
				],
				"summary": "Create a change stream.",
				"operationId": "ParkTable.createChangeStream__get_ParkTables_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/{id}/prepNotesDiet": {
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Fetches belongsTo relation prepNotesDiet.",
				"operationId": "PrepNotes.prototype.__get__prepNotesDiet",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "PrepNotes id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Diets"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "PrepNotes.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "PrepNotes.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "PrepNotes.replaceOrCreate__put_PrepNotes",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "PrepNotes.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PrepNotes"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/replaceOrCreate": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "PrepNotes.replaceOrCreate__post_PrepNotes_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/upsertWithWhere": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "PrepNotes.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/{id}/exists": {
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "PrepNotes.exists__get_PrepNotes_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/{id}": {
			"head": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "PrepNotes.exists__head_PrepNotes_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "PrepNotes.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "PrepNotes.replaceById__put_PrepNotes_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "PrepNotes.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "PrepNotes.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "PrepNotes id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/{id}/replace": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "PrepNotes.replaceById__post_PrepNotes_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/findOne": {
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "PrepNotes.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/PrepNotes"
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/update": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "PrepNotes.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/PrepNotes"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/count": {
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "PrepNotes.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/PrepNotes/change-stream": {
			"post": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Create a change stream.",
				"operationId": "PrepNotes.createChangeStream__post_PrepNotes_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"PrepNotes"
				],
				"summary": "Create a change stream.",
				"operationId": "PrepNotes.createChangeStream__get_PrepNotes_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Species.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Species"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Species.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Species"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Species.replaceOrCreate__put_Species",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Species.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Species"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/replaceOrCreate": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Species.replaceOrCreate__post_Species_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/upsertWithWhere": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Species.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/{id}/exists": {
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Species.exists__get_Species_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/{id}": {
			"head": {
				"tags": [
					"Species"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Species.exists__head_Species_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Species.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Species"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Species.replaceById__put_Species_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Species"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Species.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Species"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Species.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Species id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/{id}/replace": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Species.replaceById__post_Species_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/findOne": {
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Species.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Species"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/update": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Species.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Species"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/count": {
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Species.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Species/change-stream": {
			"post": {
				"tags": [
					"Species"
				],
				"summary": "Create a change stream.",
				"operationId": "Species.createChangeStream__post_Species_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Species"
				],
				"summary": "Create a change stream.",
				"operationId": "Species.createChangeStream__get_Species_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "SrcCd.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"SrcCd"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "SrcCd.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"SrcCd"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "SrcCd.replaceOrCreate__put_SrcCds",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "SrcCd.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SrcCd"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/replaceOrCreate": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "SrcCd.replaceOrCreate__post_SrcCds_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/upsertWithWhere": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "SrcCd.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/{id}/exists": {
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "SrcCd.exists__get_SrcCds_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/{id}": {
			"head": {
				"tags": [
					"SrcCd"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "SrcCd.exists__head_SrcCds_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "SrcCd.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"SrcCd"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "SrcCd.replaceById__put_SrcCds_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"SrcCd"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "SrcCd.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"SrcCd"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "SrcCd.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "SrcCd id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/{id}/replace": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "SrcCd.replaceById__post_SrcCds_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/findOne": {
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "SrcCd.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/SrcCd"
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/update": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "SrcCd.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/SrcCd"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/count": {
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "SrcCd.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/SrcCds/change-stream": {
			"post": {
				"tags": [
					"SrcCd"
				],
				"summary": "Create a change stream.",
				"operationId": "SrcCd.createChangeStream__post_SrcCds_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"SrcCd"
				],
				"summary": "Create a change stream.",
				"operationId": "SrcCd.createChangeStream__get_SrcCds_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/{id}/subenclosureLocation": {
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Fetches belongsTo relation subenclosureLocation.",
				"operationId": "Subenclosures.prototype.__get__subenclosureLocation",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Subenclosures id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "refresh",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Subenclosures.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Subenclosures.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Subenclosures.replaceOrCreate__put_Subenclosures",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Subenclosures.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Subenclosures"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/replaceOrCreate": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Subenclosures.replaceOrCreate__post_Subenclosures_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/upsertWithWhere": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Subenclosures.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/{id}/exists": {
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Subenclosures.exists__get_Subenclosures_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/{id}": {
			"head": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Subenclosures.exists__head_Subenclosures_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Subenclosures.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Subenclosures.replaceById__put_Subenclosures_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Subenclosures.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Subenclosures.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Subenclosures id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/{id}/replace": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Subenclosures.replaceById__post_Subenclosures_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/findOne": {
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Subenclosures.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Subenclosures"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/update": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Subenclosures.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Subenclosures"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/count": {
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Subenclosures.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Subenclosures/change-stream": {
			"post": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Create a change stream.",
				"operationId": "Subenclosures.createChangeStream__post_Subenclosures_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Subenclosures"
				],
				"summary": "Create a change stream.",
				"operationId": "Subenclosures.createChangeStream__get_Subenclosures_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "TodayDiet.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDiet.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDiet.replaceOrCreate__put_TodayDiets",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "TodayDiet.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TodayDiet"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/replaceOrCreate": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDiet.replaceOrCreate__post_TodayDiets_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/upsertWithWhere": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "TodayDiet.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/{id}/exists": {
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TodayDiet.exists__get_TodayDiets_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/{id}": {
			"head": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TodayDiet.exists__head_TodayDiets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "TodayDiet.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDiet.replaceById__put_TodayDiets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "TodayDiet.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDiet.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "TodayDiet id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/{id}/replace": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDiet.replaceById__post_TodayDiets_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/findOne": {
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "TodayDiet.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/update": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "TodayDiet.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/count": {
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "TodayDiet.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDiets/change-stream": {
			"post": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Create a change stream.",
				"operationId": "TodayDiet.createChangeStream__post_TodayDiets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDiet"
				],
				"summary": "Create a change stream.",
				"operationId": "TodayDiet.createChangeStream__get_TodayDiets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "TodayDietSub.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDietSub.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDietSub.replaceOrCreate__put_TodayDietSubs",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "TodayDietSub.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TodayDietSub"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/replaceOrCreate": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TodayDietSub.replaceOrCreate__post_TodayDietSubs_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/upsertWithWhere": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "TodayDietSub.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/{id}/exists": {
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TodayDietSub.exists__get_TodayDietSubs_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/{id}": {
			"head": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TodayDietSub.exists__head_TodayDietSubs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "TodayDietSub.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDietSub.replaceById__put_TodayDietSubs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "TodayDietSub.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDietSub.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "TodayDietSub id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/{id}/replace": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TodayDietSub.replaceById__post_TodayDietSubs_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/findOne": {
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "TodayDietSub.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/update": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "TodayDietSub.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TodayDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/count": {
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "TodayDietSub.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TodayDietSubs/change-stream": {
			"post": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Create a change stream.",
				"operationId": "TodayDietSub.createChangeStream__post_TodayDietSubs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TodayDietSub"
				],
				"summary": "Create a change stream.",
				"operationId": "TodayDietSub.createChangeStream__get_TodayDietSubs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "TomorrowDiet.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDiet.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDiet.replaceOrCreate__put_TomorrowDiets",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "TomorrowDiet.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TomorrowDiet"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/replaceOrCreate": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDiet.replaceOrCreate__post_TomorrowDiets_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/upsertWithWhere": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "TomorrowDiet.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/{id}/exists": {
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TomorrowDiet.exists__get_TomorrowDiets_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/{id}": {
			"head": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TomorrowDiet.exists__head_TomorrowDiets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "TomorrowDiet.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDiet.replaceById__put_TomorrowDiets_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "TomorrowDiet.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDiet.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "TomorrowDiet id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/{id}/replace": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDiet.replaceById__post_TomorrowDiets_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/findOne": {
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "TomorrowDiet.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/update": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "TomorrowDiet.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDiet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/count": {
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "TomorrowDiet.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDiets/change-stream": {
			"post": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Create a change stream.",
				"operationId": "TomorrowDiet.createChangeStream__post_TomorrowDiets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDiet"
				],
				"summary": "Create a change stream.",
				"operationId": "TomorrowDiet.createChangeStream__get_TomorrowDiets_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "TomorrowDietSub.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDietSub.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDietSub.replaceOrCreate__put_TomorrowDietSubs",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "TomorrowDietSub.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TomorrowDietSub"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/replaceOrCreate": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "TomorrowDietSub.replaceOrCreate__post_TomorrowDietSubs_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/upsertWithWhere": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "TomorrowDietSub.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/{id}/exists": {
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TomorrowDietSub.exists__get_TomorrowDietSubs_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/{id}": {
			"head": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "TomorrowDietSub.exists__head_TomorrowDietSubs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "TomorrowDietSub.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDietSub.replaceById__put_TomorrowDietSubs_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "TomorrowDietSub.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDietSub.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "TomorrowDietSub id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/{id}/replace": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "TomorrowDietSub.replaceById__post_TomorrowDietSubs_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/findOne": {
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "TomorrowDietSub.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/update": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "TomorrowDietSub.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/TomorrowDietSub"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/count": {
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "TomorrowDietSub.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/TomorrowDietSubs/change-stream": {
			"post": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Create a change stream.",
				"operationId": "TomorrowDietSub.createChangeStream__post_TomorrowDietSubs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"TomorrowDietSub"
				],
				"summary": "Create a change stream.",
				"operationId": "TomorrowDietSub.createChangeStream__get_TomorrowDietSubs_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Units.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Units"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Units.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Units"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Units.replaceOrCreate__put_Units",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Units.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Units"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/replaceOrCreate": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Units.replaceOrCreate__post_Units_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/upsertWithWhere": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Units.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/{id}/exists": {
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Units.exists__get_Units_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/{id}": {
			"head": {
				"tags": [
					"Units"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Units.exists__head_Units_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Units.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Units"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Units.replaceById__put_Units_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Units"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Units.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Units"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Units.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Units id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/{id}/replace": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Units.replaceById__post_Units_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/findOne": {
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Units.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Units"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/update": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Units.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Units"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/count": {
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Units.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Units/change-stream": {
			"post": {
				"tags": [
					"Units"
				],
				"summary": "Create a change stream.",
				"operationId": "Units.createChangeStream__post_Units_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Units"
				],
				"summary": "Create a change stream.",
				"operationId": "Units.createChangeStream__get_Units_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Create a new instance of the model and persist it into the data source.",
				"operationId": "Weekdays.create",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Weekdays"
				],
				"summary": "Patch an existing model instance or insert a new one into the data source.",
				"operationId": "Weekdays.patchOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Weekdays"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Weekdays.replaceOrCreate__put_Weekdays",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Find all instances of the model matched by filter from the data source.",
				"operationId": "Weekdays.find",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Weekdays"
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/replaceOrCreate": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Replace an existing model instance or insert a new one into the data source.",
				"operationId": "Weekdays.replaceOrCreate__post_Weekdays_replaceOrCreate",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/upsertWithWhere": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
				"operationId": "Weekdays.upsertWithWhere",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/{id}/exists": {
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Weekdays.exists__get_Weekdays_{id}_exists",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/{id}": {
			"head": {
				"tags": [
					"Weekdays"
				],
				"summary": "Check whether a model instance exists in the data source.",
				"operationId": "Weekdays.exists__head_Weekdays_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"exists": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Find a model instance by {{id}} from the data source.",
				"operationId": "Weekdays.findById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			},
			"put": {
				"tags": [
					"Weekdays"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Weekdays.replaceById__put_Weekdays_{id}",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Weekdays"
				],
				"summary": "Delete a model instance by {{id}} from the data source.",
				"operationId": "Weekdays.deleteById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object"
						}
					}
				},
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Weekdays"
				],
				"summary": "Patch attributes for a model instance and persist it into the data source.",
				"operationId": "Weekdays.prototype.patchAttributes",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Weekdays id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/{id}/replace": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Replace attributes for a model instance and persist it into the data source.",
				"operationId": "Weekdays.replaceById__post_Weekdays_{id}_replace",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Model id",
						"required": true,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "Model instance data",
						"required": false,
						"schema": {
							"description": "Model instance data",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/findOne": {
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Find first instance of the model matched by filter from the data source.",
				"operationId": "Weekdays.findOne",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"$ref": "#/definitions/Weekdays"
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/update": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Update instances of the model matched by {{where}} from the data source.",
				"operationId": "Weekdays.updateAll",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					},
					{
						"name": "data",
						"in": "body",
						"description": "An object of model property name/value pairs",
						"required": false,
						"schema": {
							"description": "An object of model property name/value pairs",
							"$ref": "#/definitions/Weekdays"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"description": "Information related to the outcome of the operation",
							"type": "object",
							"properties": {
								"count": {
									"description": "The number of instances updated",
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/count": {
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Count instances of the model matched by where from the data source.",
				"operationId": "Weekdays.count",
				"parameters": [
					{
						"name": "where",
						"in": "query",
						"description": "Criteria to match model instances",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "object",
							"properties": {
								"count": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"deprecated": false
			}
		},
		"/Weekdays/change-stream": {
			"post": {
				"tags": [
					"Weekdays"
				],
				"summary": "Create a change stream.",
				"operationId": "Weekdays.createChangeStream__post_Weekdays_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "formData",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			},
			"get": {
				"tags": [
					"Weekdays"
				],
				"summary": "Create a change stream.",
				"operationId": "Weekdays.createChangeStream__get_Weekdays_change-stream",
				"parameters": [
					{
						"name": "options",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "JSON"
					}
				],
				"responses": {
					"200": {
						"description": "Request was successful",
						"schema": {
							"type": "file"
						}
					}
				},
				"deprecated": false
			}
		}
	},
	"tags": [
		{
			"name": "User"
		},
		{
			"name": "Animals"
		},
		{
			"name": "BudgetIds"
		},
		{
			"name": "CaseNotes"
		},
		{
			"name": "DataSrc"
		},
		{
			"name": "DeliveryContainers"
		},
		{
			"name": "Diets"
		},
		{
			"name": "DietChanges"
		},
		{
			"name": "DietHistory"
		},
		{
			"name": "DietPlan"
		},
		{
			"name": "Employees"
		},
		{
			"name": "Food"
		},
		{
			"name": "FoodCategories"
		},
		{
			"name": "FoodPrepTables"
		},
		{
			"name": "FoodWeights"
		},
		{
			"name": "LifeStages"
		},
		{
			"name": "Locations"
		},
		{
			"name": "Logons"
		},
		{
			"name": "NutrDef"
		},
		{
			"name": "NutData"
		},
		{
			"name": "ParkTable"
		},
		{
			"name": "PrepNotes"
		},
		{
			"name": "Species"
		},
		{
			"name": "SrcCd"
		},
		{
			"name": "Subenclosures"
		},
		{
			"name": "TodayDiet"
		},
		{
			"name": "TodayDietSub"
		},
		{
			"name": "TomorrowDiet"
		},
		{
			"name": "TomorrowDietSub"
		},
		{
			"name": "Units"
		},
		{
			"name": "Weekdays"
		}
	],
	"consumes": [
		"application/json",
		"application/x-www-form-urlencoded",
		"application/xml",
		"text/xml"
	],
	"produces": [
		"application/json",
		"application/xml",
		"text/xml",
		"application/javascript",
		"text/javascript"
	],
	"definitions": {
		"x-any": {
			"properties": {

			}
		},
		"AccessToken": {
			"properties": {
				"id": {
					"type": "string"
				},
				"ttl": {
					"default": 1209600,
					"description": "time to live in seconds (2 weeks by default)",
					"type": "number",
					"format": "double"
				},
				"scopes": {
					"description": "Array of scopes granted to this access token.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"created": {
					"type": "string",
					"format": "date-time"
				},
				"userId": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"id"
			],
			"additionalProperties": false
		},
		"User": {
			"properties": {
				"realm": {
					"type": "string"
				},
				"username": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"emailVerified": {
					"type": "boolean"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"email"
			],
			"additionalProperties": false
		},
		"Diets": {
			"properties": {
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"speciesId": {
					"type": "number",
					"format": "double"
				},
				"current": {
					"type": "number",
					"format": "double"
				},
				"userLogin": {
					"maxLength": 255,
					"type": "number",
					"format": "double"
				},
				"tableId": {
					"type": "number",
					"format": "double"
				},
				"date": {
					"type": "string",
					"format": "date-time"
				},
				"parkId": {
					"type": "number",
					"format": "double"
				},
				"noteId": {
					"maxLength": 28,
					"type": "string"
				},
				"label": {
					"type": "number",
					"format": "double"
				},
				"dcId": {
					"type": "number",
					"format": "double"
				},
				"ncPrepares": {
					"type": "number",
					"format": "double"
				},
				"groupId": {
					"type": "number",
					"format": "double"
				},
				"analyzed": {
					"type": "number",
					"format": "double"
				},
				"dateAnalyzed": {
					"type": "string",
					"format": "date-time"
				},
				"newDietId": {
					"maxLength": 255,
					"type": "string"
				},
				"numAnimals": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"dietId",
				"current",
				"label",
				"ncPrepares",
				"analyzed"
			],
			"additionalProperties": false
		},
		"Animals": {
			"properties": {
				"animalId": {
					"type": "number",
					"format": "double"
				},
				"accessionNum": {
					"maxLength": 255,
					"type": "string"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"lifeStage": {
					"maxLength": 255,
					"type": "string"
				},
				"houseName": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"animalId"
			],
			"additionalProperties": false
		},
		"BudgetIds": {
			"properties": {
				"budgetId": {
					"type": "number",
					"format": "double"
				},
				"budgetCode": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"budgetId"
			],
			"additionalProperties": false
		},
		"CaseNotes": {
			"properties": {
				"caseNotesId": {
					"type": "number",
					"format": "double"
				},
				"caseDate": {
					"type": "string",
					"format": "date-time"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"bcs": {
					"type": "number",
					"format": "double"
				},
				"caseNote": {
					"maxLength": 4294967295,
					"type": "string"
				}
			},
			"required": [
				"caseNotesId"
			],
			"additionalProperties": false
		},
		"DataSrc": {
			"properties": {
				"dataSrcId": {
					"type": "number",
					"format": "double"
				},
				"shortForm": {
					"maxLength": 255,
					"type": "string"
				},
				"authors": {
					"maxLength": 255,
					"type": "string"
				},
				"title": {
					"maxLength": 255,
					"type": "string"
				},
				"year": {
					"maxLength": 4,
					"type": "string"
				},
				"journal": {
					"maxLength": 135,
					"type": "string"
				},
				"volCity": {
					"maxLength": 16,
					"type": "string"
				},
				"issueState": {
					"maxLength": 5,
					"type": "string"
				},
				"startPage": {
					"maxLength": 5,
					"type": "string"
				},
				"endPage": {
					"maxLength": 5,
					"type": "string"
				}
			},
			"required": [
				"dataSrcId"
			],
			"additionalProperties": false
		},
		"Locations": {
			"properties": {
				"locationId": {
					"type": "number",
					"format": "double"
				},
				"location": {
					"maxLength": 50,
					"type": "string"
				},
				"color": {
					"maxLength": 255,
					"type": "string"
				},
				"shortLocation": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"locationId"
			],
			"additionalProperties": false
		},
		"DeliveryContainers": {
			"properties": {
				"dcId": {
					"type": "number",
					"format": "double"
				},
				"dc": {
					"maxLength": 50,
					"type": "string"
				},
				"locationId": {
					"type": "number",
					"format": "double"
				},
				"exhibit": {
					"maxLength": 255,
					"type": "string"
				},
				"sortOrder": {
					"type": "number",
					"format": "double"
				},
				"dcCode": {
					"maxLength": 255,
					"type": "string"
				},
				"artemisArea": {
					"maxLength": 255,
					"type": "string"
				},
				"artemisEnclosure": {
					"maxLength": 255,
					"type": "string"
				},
				"artemisSubenclosure": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"dcId"
			],
			"additionalProperties": false
		},
		"Employees": {
			"properties": {
				"employeeId": {
					"type": "number",
					"format": "double"
				},
				"employee": {
					"maxLength": 50,
					"type": "string"
				},
				"userLogin": {
					"maxLength": 255,
					"type": "string"
				},
				"initials": {
					"maxLength": 255,
					"type": "string"
				},
				"locationId": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"employeeId"
			],
			"additionalProperties": false
		},
		"FoodPrepTables": {
			"properties": {
				"tableId": {
					"type": "number",
					"format": "double"
				},
				"description": {
					"maxLength": 50,
					"type": "string"
				},
				"tableCode": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"tableId"
			],
			"additionalProperties": false
		},
		"Species": {
			"properties": {
				"speciesId": {
					"type": "number",
					"format": "double"
				},
				"species": {
					"maxLength": 255,
					"type": "string"
				},
				"scientificName": {
					"maxLength": 255,
					"type": "string"
				},
				"category": {
					"maxLength": 255,
					"type": "string"
				},
				"type": {
					"maxLength": 255,
					"type": "string"
				},
				"speciesCategoryId": {
					"type": "number",
					"format": "double"
				},
				"imageLink": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"speciesId"
			],
			"additionalProperties": false
		},
		"Subenclosures": {
			"properties": {
				"seId": {
					"type": "number",
					"format": "double"
				},
				"subenclosure": {
					"maxLength": 50,
					"type": "string"
				},
				"locationId": {
					"type": "number",
					"format": "double"
				},
				"groupId": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"seId"
			],
			"additionalProperties": false
		},
		"DietChanges": {
			"properties": {
				"dietChangeId": {
					"type": "number",
					"format": "double"
				},
				"dietChangeDate": {
					"type": "string",
					"format": "date-time"
				},
				"dietChangeTime": {
					"type": "number",
					"format": "double"
				},
				"dietChangeReason": {
					"maxLength": 4294967295,
					"type": "string"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"bgtUserId": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"dietChangeId"
			],
			"additionalProperties": false
		},
		"Food": {
			"properties": {
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"sciName": {
					"maxLength": 255,
					"type": "string"
				},
				"manufacturerName": {
					"maxLength": 255,
					"type": "string"
				},
				"ohdzName": {
					"maxLength": 255,
					"type": "string"
				},
				"food": {
					"maxLength": 50,
					"type": "string"
				},
				"costG": {
					"type": "number",
					"format": "double"
				},
				"budgetId": {
					"type": "number",
					"format": "double"
				},
				"category": {
					"type": "number",
					"format": "double"
				},
				"usdaFoodGroupDesc": {
					"maxLength": 255,
					"type": "string"
				},
				"dry": {
					"type": "number",
					"format": "double"
				},
				"meat": {
					"type": "number",
					"format": "double"
				},
				"preChop": {
					"type": "number",
					"format": "double"
				},
				"preBag": {
					"type": "number",
					"format": "double"
				},
				"active": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"foodId",
				"dry",
				"meat",
				"preChop",
				"preBag",
				"active"
			],
			"additionalProperties": false
		},
		"Units": {
			"properties": {
				"unitId": {
					"type": "number",
					"format": "double"
				},
				"unit": {
					"maxLength": 50,
					"type": "string"
				},
				"unitType": {
					"maxLength": 255,
					"type": "string"
				},
				"conversionToG": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"unitId"
			],
			"additionalProperties": false
		},
		"DietHistory": {
			"properties": {
				"id": {
					"type": "number",
					"format": "double"
				},
				"startId": {
					"type": "string",
					"format": "date-time"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"amount": {
					"type": "number",
					"format": "double"
				},
				"unitId": {
					"type": "number",
					"format": "double"
				},
				"sun": {
					"type": "number",
					"format": "double"
				},
				"mon": {
					"type": "number",
					"format": "double"
				},
				"tue": {
					"type": "number",
					"format": "double"
				},
				"wed": {
					"type": "number",
					"format": "double"
				},
				"thr": {
					"type": "number",
					"format": "double"
				},
				"fri": {
					"type": "number",
					"format": "double"
				},
				"sat": {
					"type": "number",
					"format": "double"
				},
				"sort": {
					"type": "number",
					"format": "double"
				},
				"tote": {
					"type": "number",
					"format": "double"
				},
				"feeding": {
					"type": "number",
					"format": "double"
				},
				"lineNotes": {
					"maxLength": 255,
					"type": "string"
				},
				"bgtUserId": {
					"maxLength": 255,
					"type": "number",
					"format": "double"
				},
				"indAmount": {
					"type": "number",
					"format": "double"
				},
				"numAnimals": {
					"type": "number",
					"format": "double"
				},
				"freqWeeks": {
					"type": "number",
					"format": "double"
				},
				"freqRotation": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"id",
				"sun",
				"mon",
				"tue",
				"wed",
				"thr",
				"fri",
				"sat"
			],
			"additionalProperties": false
		},
		"DietPlan": {
			"properties": {
				"id": {
					"type": "number",
					"format": "double"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"indAmount": {
					"type": "number",
					"format": "double"
				},
				"tempAmount": {
					"type": "number",
					"format": "double"
				},
				"groupAmount": {
					"type": "number",
					"format": "double"
				},
				"unitId": {
					"type": "number",
					"format": "double"
				},
				"sun": {
					"type": "number",
					"format": "double"
				},
				"mon": {
					"type": "number",
					"format": "double"
				},
				"tue": {
					"type": "number",
					"format": "double"
				},
				"wed": {
					"type": "number",
					"format": "double"
				},
				"thr": {
					"type": "number",
					"format": "double"
				},
				"fri": {
					"type": "number",
					"format": "double"
				},
				"sat": {
					"type": "number",
					"format": "double"
				},
				"sort": {
					"type": "number",
					"format": "double"
				},
				"tote": {
					"type": "number",
					"format": "double"
				},
				"feeding": {
					"type": "number",
					"format": "double"
				},
				"lineNotes": {
					"maxLength": 255,
					"type": "string"
				},
				"freqWeeks": {
					"type": "number",
					"format": "double"
				},
				"freqRotation": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"id",
				"sun",
				"mon",
				"tue",
				"wed",
				"thr",
				"fri",
				"sat"
			],
			"additionalProperties": false
		},
		"FoodCategories": {
			"properties": {
				"categoryId": {
					"type": "number",
					"format": "double"
				},
				"foodCategory": {
					"maxLength": 50,
					"type": "string"
				},
				"sortOrder": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"categoryId"
			],
			"additionalProperties": false
		},
		"FoodWeights": {
			"properties": {
				"weightId": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"weightAmount": {
					"type": "number",
					"format": "double"
				},
				"unitIdNum": {
					"type": "number",
					"format": "double"
				},
				"gmWeight": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"weightId"
			],
			"additionalProperties": false
		},
		"LifeStages": {
			"properties": {
				"lifeStageId": {
					"type": "number",
					"format": "double"
				},
				"lifeStageCode": {
					"maxLength": 255,
					"type": "string"
				},
				"lifeStageName": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"lifeStageId"
			],
			"additionalProperties": false
		},
		"Logons": {
			"properties": {
				"loginId": {
					"type": "number",
					"format": "double"
				},
				"windowsLogon": {
					"maxLength": 255,
					"type": "string"
				},
				"logonDate": {
					"type": "string",
					"format": "date-time"
				},
				"logoffDate": {
					"type": "string",
					"format": "date-time"
				},
				"dbType": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"loginId"
			],
			"additionalProperties": false
		},
		"NutrDef": {
			"properties": {
				"nutrNo": {
					"maxLength": 255,
					"type": "string"
				},
				"units": {
					"maxLength": 7,
					"type": "string"
				},
				"tagname": {
					"maxLength": 20,
					"type": "string"
				},
				"nutrDesc": {
					"maxLength": 60,
					"type": "string"
				},
				"numDec": {
					"maxLength": 1,
					"type": "string"
				},
				"srOrder": {
					"type": "number",
					"format": "double"
				},
				"bgtName": {
					"maxLength": 255,
					"type": "string"
				},
				"nutrDefId": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"nutrDefId"
			],
			"additionalProperties": false
		},
		"SrcCd": {
			"properties": {
				"srcCd": {
					"maxLength": 2,
					"type": "string"
				},
				"srcCdDesc": {
					"maxLength": 60,
					"type": "string"
				},
				"sort": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"srcCd"
			],
			"additionalProperties": false
		},
		"NutData": {
			"properties": {
				"dataId": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"nutrNo": {
					"maxLength": 255,
					"type": "number",
					"format": "double"
				},
				"nutrVal": {
					"type": "number",
					"format": "double"
				},
				"numDataPts": {
					"maxLength": 255,
					"type": "string"
				},
				"stdError": {
					"maxLength": 255,
					"type": "string"
				},
				"srcCd": {
					"maxLength": 2,
					"type": "string"
				},
				"derivCd": {
					"maxLength": 255,
					"type": "string"
				},
				"refNdbNo": {
					"maxLength": 255,
					"type": "string"
				},
				"addNutrMark": {
					"maxLength": 255,
					"type": "string"
				},
				"numStudies": {
					"maxLength": 255,
					"type": "string"
				},
				"min": {
					"maxLength": 255,
					"type": "string"
				},
				"max": {
					"maxLength": 255,
					"type": "string"
				},
				"df": {
					"maxLength": 255,
					"type": "string"
				},
				"lowEb": {
					"maxLength": 255,
					"type": "string"
				},
				"upEb": {
					"maxLength": 255,
					"type": "string"
				},
				"statCmt": {
					"maxLength": 255,
					"type": "string"
				},
				"addModDate": {
					"type": "string",
					"format": "date-time"
				},
				"dataSrcId": {
					"type": "number",
					"format": "double"
				},
				"dataSrcName": {
					"maxLength": 255,
					"type": "string"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"dataId"
			],
			"additionalProperties": false
		},
		"ParkTable": {
			"properties": {
				"parkId": {
					"type": "number",
					"format": "double"
				},
				"park": {
					"maxLength": 50,
					"type": "string"
				},
				"shortName": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"parkId"
			],
			"additionalProperties": false
		},
		"PrepNotes": {
			"properties": {
				"prepNoteId": {
					"type": "number",
					"format": "double"
				},
				"prepNote": {
					"maxLength": 255,
					"type": "string"
				},
				"dietId": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"prepNoteId"
			],
			"additionalProperties": false
		},
		"TodayDiet": {
			"properties": {
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"speciesId": {
					"type": "number",
					"format": "double"
				},
				"species": {
					"maxLength": 255,
					"type": "string"
				},
				"current": {
					"type": "number",
					"format": "double"
				},
				"label": {
					"type": "number",
					"format": "double"
				},
				"ncPrepares": {
					"type": "number",
					"format": "double"
				},
				"noteId": {
					"maxLength": 28,
					"type": "string"
				},
				"dcId": {
					"type": "number",
					"format": "double"
				},
				"dc": {
					"maxLength": 50,
					"type": "string"
				},
				"location": {
					"maxLength": 50,
					"type": "string"
				},
				"tabelId": {
					"type": "number",
					"format": "double"
				},
				"sortOrder": {
					"type": "number",
					"format": "double"
				},
				"groupId": {
					"type": "number",
					"format": "double"
				},
				"dataDate": {
					"type": "string",
					"format": "date-time"
				},
				"imageLink": {
					"maxLength": 255,
					"type": "string"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"current",
				"label",
				"ncPrepares"
			],
			"additionalProperties": false
		},
		"TodayDietSub": {
			"properties": {
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"feeding": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"groupAmount": {
					"type": "number",
					"format": "double"
				},
				"unitId": {
					"type": "number",
					"format": "double"
				},
				"sort": {
					"type": "number",
					"format": "double"
				},
				"tote": {
					"type": "number",
					"format": "double"
				},
				"food": {
					"maxLength": 50,
					"type": "string"
				},
				"unit": {
					"maxLength": 50,
					"type": "string"
				},
				"lineNotes": {
					"maxLength": 255,
					"type": "string"
				},
				"meat": {
					"type": "number",
					"format": "double"
				},
				"tableId": {
					"type": "number",
					"format": "double"
				},
				"targetTable": {
					"type": "number",
					"format": "double"
				},
				"dcSortOrder": {
					"type": "number",
					"format": "double"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"dietId"
			],
			"additionalProperties": false
		},
		"TomorrowDiet": {
			"properties": {
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"speciesId": {
					"type": "number",
					"format": "double"
				},
				"species": {
					"maxLength": 255,
					"type": "string"
				},
				"current": {
					"type": "number",
					"format": "double"
				},
				"label": {
					"type": "number",
					"format": "double"
				},
				"ncPrepares": {
					"type": "number",
					"format": "double"
				},
				"noteId": {
					"maxLength": 28,
					"type": "string"
				},
				"dcId": {
					"type": "number",
					"format": "double"
				},
				"dc": {
					"maxLength": 50,
					"type": "string"
				},
				"location": {
					"maxLength": 50,
					"type": "string"
				},
				"tableId": {
					"type": "number",
					"format": "double"
				},
				"sortOrder": {
					"type": "number",
					"format": "double"
				},
				"groupId": {
					"type": "number",
					"format": "double"
				},
				"dataDate": {
					"type": "string",
					"format": "date-time"
				},
				"imageLink": {
					"maxLength": 255,
					"type": "string"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"current",
				"label",
				"ncPrepares"
			],
			"additionalProperties": false
		},
		"TomorrowDietSub": {
			"properties": {
				"dietId": {
					"type": "number",
					"format": "double"
				},
				"feeding": {
					"type": "number",
					"format": "double"
				},
				"foodId": {
					"type": "number",
					"format": "double"
				},
				"groupAmount": {
					"type": "number",
					"format": "double"
				},
				"unitId": {
					"type": "number",
					"format": "double"
				},
				"sort": {
					"type": "number",
					"format": "double"
				},
				"tote": {
					"type": "number",
					"format": "double"
				},
				"food": {
					"maxLength": 50,
					"type": "string"
				},
				"unit": {
					"maxLength": 50,
					"type": "string"
				},
				"lineNotes": {
					"maxLength": 255,
					"type": "string"
				},
				"meat": {
					"type": "number",
					"format": "double"
				},
				"tableId": {
					"type": "number",
					"format": "double"
				},
				"targetTable": {
					"type": "number",
					"format": "double"
				},
				"dcSortOrder": {
					"type": "number",
					"format": "double"
				},
				"id": {
					"type": "number",
					"format": "double"
				}
			},
			"required": [
				"dietId"
			],
			"additionalProperties": false
		},
		"Weekdays": {
			"properties": {
				"weekdayId": {
					"type": "number",
					"format": "double"
				},
				"sameDayText": {
					"maxLength": 255,
					"type": "string"
				},
				"nextDayText": {
					"maxLength": 255,
					"type": "string"
				}
			},
			"required": [
				"weekdayId"
			],
			"additionalProperties": false
		}
	}
}
